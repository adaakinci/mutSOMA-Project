pedigree[,3]<-div.collect
pedigree2<-pedigree[,c(6,4,5,3)]
#dthis<-as.numeric(pedigree2[,2]) + as.numeric(pedigree2[,3]) - as.numeric(2*pedigree2[,1])
#plot(dthis, pedigree2[,4])
output<-list(pedigree2, pedigree)
names(output)<-c("pedigree", "pedigree.augmented")
output
}
input.dir <- "/Users/adaakinci/Desktop/tree13_14"
tree13 <- file.path(input.dir, "tree13.moderate.all.vcf")
tree14 <- file.path(input.dir, "tree14.moderate.all.vcf")
# tree13 <- file.path(input.dir, "tree13.moderate.all.vcf")
# tree14 <- file.path(input.dir, "tree14.moderate.all.vcf")
result <- makeVCFpedigreeTEMPv2(genome.size = genome.size,
input.dir = input.dir,
tree13 = tree13,
tree14 = tree14)
input.dir <- "/Users/adaakinci/Desktop/tree13_14"
tree13 <- file.path(input.dir, "tree13_relaxed_ID.vcf")
tree14 <- file.path(input.dir, "tree14_relaxed_ID.vcf")
# tree13 <- file.path(input.dir, "tree13.moderate.all.vcf")
# tree14 <- file.path(input.dir, "tree14.moderate.all.vcf")
result <- makeVCFpedigreeTEMPv2(genome.size = genome.size,
input.dir = input.dir,
tree13 = tree13,
tree14 = tree14)
print(result)
library(vcfR)
fix_vcf_ID <- function(vcf_path, output_path) {
# Read the VCF file
vcf <- read.vcfR(vcf_path, verbose = FALSE)
# Convert the @fix slot into a clean data frame (no factors!)
fix_df <- as.data.frame(vcf@fix, stringsAsFactors = FALSE)
# Always overwrite ID column with CHROM_POS (not just missing ones)
fix_df$ID <- paste(fix_df$CHROM, fix_df$POS, sep = "_")
# Convert back to matrix and update the vcfR object
vcf@fix <- as.matrix(fix_df)
# Rebuild VCF content
body <- cbind(vcf@fix, vcf@gt)
header_cols <- c(colnames(vcf@fix), colnames(vcf@gt))
header_line <- paste0("#", paste(header_cols, collapse = "\t"))
body_lines <- apply(body, 1, function(x) paste(x, collapse = "\t"))
vcf_lines <- c(vcf@meta, header_line, body_lines)
# Write as plain text UTF-8 VCF
writeLines(vcf_lines, con = output_path, useBytes = TRUE)
}
# Your input directory
input.dir <- "/Users/adaakinci/Desktop/tree13_14"
# Fix tree13_moderate.vcf
fix_vcf_ID(
vcf_path = file.path(input.dir, "tree13.strict1.all.vcf"),
output_path = file.path(input.dir, "tree13_relaxed_ID.vcf")
)
# Fix tree14_moderate.vcf
fix_vcf_ID(
vcf_path = file.path(input.dir, "tree14.strict1.all.vcf"),
output_path = file.path(input.dir, "tree14_relaxed_ID.vcf")
)
library(vcfR)
fix_vcf_ID <- function(vcf_path, output_path) {
# Read the VCF file
vcf <- read.vcfR(vcf_path, verbose = FALSE)
# Convert the @fix slot into a clean data frame (no factors!)
fix_df <- as.data.frame(vcf@fix, stringsAsFactors = FALSE)
# Always overwrite ID column with CHROM_POS (not just missing ones)
fix_df$ID <- paste(fix_df$CHROM, fix_df$POS, sep = "_")
# Convert back to matrix and update the vcfR object
vcf@fix <- as.matrix(fix_df)
# Rebuild VCF content
body <- cbind(vcf@fix, vcf@gt)
header_cols <- c(colnames(vcf@fix), colnames(vcf@gt))
header_line <- paste0("#", paste(header_cols, collapse = "\t"))
body_lines <- apply(body, 1, function(x) paste(x, collapse = "\t"))
vcf_lines <- c(vcf@meta, header_line, body_lines)
# Write as plain text UTF-8 VCF
writeLines(vcf_lines, con = output_path, useBytes = TRUE)
}
# Your input directory
input.dir <- "/Users/adaakinci/Desktop/tree13_14"
# Fix tree13_moderate.vcf
fix_vcf_ID(
vcf_path = file.path(input.dir, "tree13.strict1.all.vcf"),
output_path = file.path(input.dir, "tree13_strict1_ID.vcf")
)
# Fix tree14_moderate.vcf
fix_vcf_ID(
vcf_path = file.path(input.dir, "tree14.strict1.all.vcf"),
output_path = file.path(input.dir, "tree14_strict1_ID.vcf")
)
library(vcfR)
fix_vcf_ID <- function(vcf_path, output_path) {
# Read the VCF file
vcf <- read.vcfR(vcf_path, verbose = FALSE)
# Convert the @fix slot into a clean data frame (no factors!)
fix_df <- as.data.frame(vcf@fix, stringsAsFactors = FALSE)
# Always overwrite ID column with CHROM_POS (not just missing ones)
fix_df$ID <- paste(fix_df$CHROM, fix_df$POS, sep = "_")
# Convert back to matrix and update the vcfR object
vcf@fix <- as.matrix(fix_df)
# Rebuild VCF content
body <- cbind(vcf@fix, vcf@gt)
header_cols <- c(colnames(vcf@fix), colnames(vcf@gt))
header_line <- paste0("#", paste(header_cols, collapse = "\t"))
body_lines <- apply(body, 1, function(x) paste(x, collapse = "\t"))
vcf_lines <- c(vcf@meta, header_line, body_lines)
# Write as plain text UTF-8 VCF
writeLines(vcf_lines, con = output_path, useBytes = TRUE)
}
# Your input directory
input.dir <- "/Users/adaakinci/Desktop/tree13_14"
# Fix tree13_moderate.vcf
fix_vcf_ID(
vcf_path = file.path(input.dir, "tree13.strict2.all.vcf"),
output_path = file.path(input.dir, "tree13_strict2_ID.vcf")
)
# Fix tree14_moderate.vcf
fix_vcf_ID(
vcf_path = file.path(input.dir, "tree14.strict2.all.vcf"),
output_path = file.path(input.dir, "tree14_strict2_ID.vcf")
)
library(vcfR)
fix_vcf_ID <- function(vcf_path, output_path) {
# Read the VCF file
vcf <- read.vcfR(vcf_path, verbose = FALSE)
# Convert the @fix slot into a clean data frame (no factors!)
fix_df <- as.data.frame(vcf@fix, stringsAsFactors = FALSE)
# Always overwrite ID column with CHROM_POS (not just missing ones)
fix_df$ID <- paste(fix_df$CHROM, fix_df$POS, sep = "_")
# Convert back to matrix and update the vcfR object
vcf@fix <- as.matrix(fix_df)
# Rebuild VCF content
body <- cbind(vcf@fix, vcf@gt)
header_cols <- c(colnames(vcf@fix), colnames(vcf@gt))
header_line <- paste0("#", paste(header_cols, collapse = "\t"))
body_lines <- apply(body, 1, function(x) paste(x, collapse = "\t"))
vcf_lines <- c(vcf@meta, header_line, body_lines)
# Write as plain text UTF-8 VCF
writeLines(vcf_lines, con = output_path, useBytes = TRUE)
}
# Your input directory
input.dir <- "/Users/adaakinci/Desktop/tree13_14"
# Fix tree13_moderate.vcf
fix_vcf_ID(
vcf_path = file.path(input.dir, "tree13.ultra_strict.all.vcf"),
output_path = file.path(input.dir, "tree13_ultra_strict_ID.vcf")
)
# Fix tree14_moderate.vcf
fix_vcf_ID(
vcf_path = file.path(input.dir, "tree14.ultra_strict.all.vcf"),
output_path = file.path(input.dir, "tree14_ultra_strict_ID.vcf")
)
input.dir <- "/Users/adaakinci/Desktop/tree13_14"
input.dir <- "/Users/adaakinci/Desktop/tree13_14"
input.dir <- "/Users/adaakinci/Desktop/tree13_14"
tree13 <- file.path(input.dir, "tree13_strict1_ID.vcf")
tree14 <- file.path(input.dir, "tree14_strict1_ID.vcf")
# tree13 <- file.path(input.dir, "tree13.moderate.all.vcf")
# tree14 <- file.path(input.dir, "tree14.moderate.all.vcf")
result <- makeVCFpedigreeTEMPv2(genome.size = genome.size,
input.dir = input.dir,
tree13 = tree13,
tree14 = tree14)
print(result)
colnames(calls.new)<-colnames(vcf[,6:ncol(vcf)])
# Load required package
library(ggplot2)
# Step 1: Prepare data
gamma_data <- data.frame(
Method = rep(c("Python", "R"), each = 10),
Value = c(
3.04e-11, 3.01e-11, 3.02e-11, 3.02e-11, 3.05e-11, 2.95e-11, 2.99e-11, 2.96e-11, 2.97e-11, 3.06e-11,
4.17e-11, 3.91e-11, 3.88e-11, 4.12e-11, 4.09e-11, 4.46e-11, 3.92e-11, 3.92e-11, 4.54e-11, 3.44e-11
),
Parameter = "Gamma"
)
intercept_data <- data.frame(
Method = rep(c("Python", "R"), each = 10),
Value = c(
2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07,
2.25e-07, 2.26e-07, 2.27e-07, 2.26e-07, 2.25e-07, 2.25e-07, 2.28e-07, 2.28e-07, 2.23e-07, 2.29e-07
),
Parameter = "Intercept"
)
# Combine both parameters
plot_data <- rbind(gamma_data, intercept_data)
# Step 2: Compute mean ± SD for each group
summary_stats <- aggregate(Value ~ Method + Parameter, data = plot_data, function(x) c(mean = mean(x), sd = sd(x)))
summary_stats <- do.call(data.frame, summary_stats)
colnames(summary_stats) <- c("Method", "Parameter", "Mean", "SD")
# Step 3: Plot with ggplot2
ggplot(summary_stats, aes(x = Method, y = Mean, fill = Method)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD), width = 0.2, position = position_dodge(0.6)) +
facet_wrap(~Parameter, scales = "free_y") +
labs(y = "Estimate (Mean ± SD)", title = "Comparison of Python vs R Estimates") +
theme_minimal() +
theme(legend.position = "none")
# Load ggplot2
library(ggplot2)
# Step 1: Prepare raw top-10 values (replace these with actual data as needed)
gamma_py <- c(3.04e-11, 3.01e-11, 3.02e-11, 3.02e-11, 3.05e-11, 2.95e-11, 2.99e-11, 2.96e-11, 2.97e-11, 3.06e-11)
intercept_py <- c(2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07, 2.26e-07)
lse_py <- c(8.2066e-14, 8.2066e-14, 8.2066e-14, 8.2066e-14, 8.2067e-14, 8.2067e-14, 8.2067e-14, 8.2067e-14, 8.2067e-14, 8.2067e-14)
gamma_r <- c(4.17e-11, 3.91e-11, 3.88e-11, 4.12e-11, 4.09e-11, 4.46e-11, 3.92e-11, 3.92e-11, 4.54e-11, 3.44e-11)
intercept_r <- c(2.25e-07, 2.26e-07, 2.27e-07, 2.26e-07, 2.25e-07, 2.25e-07, 2.28e-07, 2.28e-07, 2.23e-07, 2.29e-07)
lse_r <- c(8.2069e-14, 8.2080e-14, 8.2080e-14, 8.2088e-14, 8.2094e-14, 8.2104e-14, 8.2110e-14, 8.2113e-14, 8.2124e-14, 8.2125e-14)
# Step 2: Combine into one data frame
make_df <- function(values, method, param) {
data.frame(Method = method, Value = values, Parameter = param)
}
df <- rbind(
make_df(gamma_py, "Python", "Gamma"),
make_df(intercept_py, "Python", "Intercept"),
make_df(lse_py, "Python", "LSE"),
make_df(gamma_r, "R", "Gamma"),
make_df(intercept_r, "R", "Intercept"),
make_df(lse_r, "R", "LSE")
)
# Step 3: Compute mean and SD
library(dplyr)
summary_df <- df %>%
group_by(Method, Parameter) %>%
summarise(Mean = mean(Value), SD = sd(Value), .groups = "drop")
# Step 4: Plot
ggplot(summary_df, aes(x = Method, y = Mean, fill = Method)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0.2, position = position_dodge(0.6)) +
facet_wrap(~Parameter, scales = "free_y") +
labs(title = "Mean Estimate ± SD for Gamma, Intercept, and LSE",
y = "Estimate Value",
x = "") +
theme_minimal() +
theme(legend.position = "none")
# Step 4: Plot
ggplot(summary_df, aes(x = Method, y = Mean, fill = Method)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0.2, position = position_dodge(0.6)) +
facet_wrap(~Parameter, scales = "free_y") +
labs(title = "Mean Estimates for Gamma, Intercept, and LSE",
y = "Estimate Values",
x = "Methods") +
theme_minimal() +
theme(legend.position = "none")
lse_r <- c(8.2069e-14, 8.2080e-14, 8.2080e-14, 8.2088e-14, 8.2094e-14, 8.2104e-14, 8.2110e-14, 8.2113e-14, 8.2124e-14, 8.2125e-14)
# Load ggplot2
library(ggplot2)
# Step 1: Prepare raw top-10 values
gamma_py <- c(3.0408862224842674e-11, 3.0102823562062e-11, 3.018758480939331e-11, 3.019086209594077e-11, 3.0529176166783405e-11, 2.949382610286285e-11, 2.993648134306151e-11, 2.963879328612711e-11, 2.9705196602183194e-11, 3.0624694752775886e-11)
intercept_py <- c(2.2571850301495136e-07, 2.2578096118107038e-07, 2.2573366603955324e-07, 2.2602203035217172e-07, 2.2577049887143866e-07, 2.2634194331504714e-07, 2.262128987685139e-07, 2.260262851416104e-07, 2.263238332705777e-07, 2.2569465239849186e-07)
lse_py <- c(8.206607727571482e-14, 8.206621093087509e-14, 8.20662677291077e-14, 8.206630291011045e-14, 8.206656017786827e-14, 8.206657440491385e-14, 8.206670159121133e-14, 8.206674921746604e-14, 8.206676754417108e-14, 8.206677344757371e-14)
gamma_r <- c(4.17e-11, 3.91e-11, 3.88e-11, 4.12e-11, 4.09e-11, 4.46e-11, 3.92e-11, 3.92e-11, 4.54e-11, 3.44e-11)
intercept_r <- c(2.25e-07, 2.26e-07, 2.27e-07, 2.26e-07, 2.25e-07, 2.25e-07, 2.28e-07, 2.28e-07, 2.23e-07, 2.29e-07)
lse_r <- c(8.2069e-14, 8.2080e-14, 8.2080e-14, 8.2088e-14, 8.2094e-14, 8.2104e-14, 8.2110e-14, 8.2113e-14, 8.2124e-14, 8.2125e-14)
# Step 2: Combine into one data frame
make_df <- function(values, method, param) {
data.frame(Method = method, Value = values, Parameter = param)
}
df <- rbind(
make_df(gamma_py, "Python", "Gamma"),
make_df(intercept_py, "Python", "Intercept"),
make_df(lse_py, "Python", "LSE"),
make_df(gamma_r, "R", "Gamma"),
make_df(intercept_r, "R", "Intercept"),
make_df(lse_r, "R", "LSE")
)
# Step 3: Compute mean and SD
library(dplyr)
summary_df <- df %>%
group_by(Method, Parameter) %>%
summarise(Mean = mean(Value), SD = sd(Value), .groups = "drop")
# Step 4: Plot
ggplot(summary_df, aes(x = Method, y = Mean, fill = Method)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0.2, position = position_dodge(0.6)) +
facet_wrap(~Parameter, scales = "free_y") +
labs(title = "Mean Estimates for Gamma, Intercept, and LSE",
y = "Estimate Values",
x = "Methods") +
theme_minimal() +
theme(legend.position = "none")
#########################################
#### Clean calls (Illumina) Paul + Sujan
#### COMPLETE TREE
#########################################
rm(list=ls())
library(Biostrings)
library(vcfR)
library(expm)
library(reticulate)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
input.data.dir <- "../../additional_files/"
out.data.dir <- "../../out/"
vcf.data.dir <- "../../vcf_files/"
pedigree_dir <- "../../pedigree_files/"
source("makePHYLO.R")
source("makeVCFpedigreeTEMPv2.R")
source("bootSOMA.R")
virtualenv_create("mutSOMA_env")
use_virtualenv("mutSOMA_env", required = TRUE)
py_install(c("numpy", "scipy", "matplotlib", "pandas"))
source_python("../Python/mutSOMA_new.py")
poplar<-readDNAStringSet(paste(input.data.dir, "PtrichocarpaStettler14_532_v1.0.fa", sep=""))
freqBASE<-letterFrequency(poplar, letters = c("A", "C", "T", "G"), as.prob=FALSE)
freqBASE<-colSums(freqBASE[1:19,])
probBASE<-freqBASE/sum(freqBASE)
## Reading in the filter info
basesin<-read.table(paste(input.data.dir, "Ptricocarpa_bases_at_each_step.txt", sep=""), header=T)
basesin[,5]<-sub(",", "", basesin[,5])
basesin[,5]<-sub(",", "", basesin[,5])
basesin[,5]<-as.numeric(basesin[,5])
print(basesin[,5])
tree13.vec<-file.path(vcf.data.dir, c("tree13.somatic.down_20.rep_1.positions.vcf",
"tree13.somatic.down_20.rep_2.positions.vcf",
"tree13.somatic.down_20.rep_3.positions.vcf",
"tree13.somatic.down_25.rep_1.positions.vcf",
"tree13.somatic.down_25.rep_2.positions.vcf",
"tree13.somatic.down_25.rep_3.positions.vcf",
"tree13.somatic.down_30.rep_1.positions.vcf",
"tree13.somatic.down_30.rep_2.positions.vcf",
"tree13.somatic.down_30.rep_3.positions.vcf",
"tree13.somatic.down_35.rep_1.positions.vcf",
"tree13.somatic.down_35.rep_2.positions.vcf",
"tree13.somatic.down_35.rep_3.positions.vcf",
"tree13.somatic.down_40.rep_1.positions.vcf",
"tree13.somatic.down_40.rep_2.positions.vcf",
"tree13.somatic.down_40.rep_3.positions.vcf",
"tree13.somatic.down_45.rep_1.positions.vcf",
"tree13.somatic.down_45.rep_2.positions.vcf",
"tree13.somatic.down_45.rep_3.positions.vcf"))
tree14.vec<-file.path(vcf.data.dir, c("tree14.somatic.down_20.rep_1.positions.vcf",
"tree14.somatic.down_20.rep_2.positions.vcf",
"tree14.somatic.down_20.rep_3.positions.vcf",
"tree14.somatic.down_25.rep_1.positions.vcf",
"tree14.somatic.down_25.rep_2.positions.vcf",
"tree14.somatic.down_25.rep_3.positions.vcf",
"tree14.somatic.down_30.rep_1.positions.vcf",
"tree14.somatic.down_30.rep_2.positions.vcf",
"tree14.somatic.down_30.rep_3.positions.vcf",
"tree14.somatic.down_35.rep_1.positions.vcf",
"tree14.somatic.down_35.rep_2.positions.vcf",
"tree14.somatic.down_35.rep_3.positions.vcf",
"tree14.somatic.down_40.rep_1.positions.vcf",
"tree14.somatic.down_40.rep_2.positions.vcf",
"tree14.somatic.down_40.rep_3.positions.vcf",
"tree14.somatic.down_45.rep_1.positions.vcf",
"tree14.somatic.down_45.rep_2.positions.vcf",
"tree14.somatic.down_45.rep_3.positions.vcf"))
gs13<-c(rep(40388007, 3),
rep(44900782, 3),
rep(38229529, 3),
rep(32546285, 3),
rep(24989388, 3),
rep(18264725, 3))
gs14<-c(rep(54998919, 3),
rep(58223515, 3),
rep(49555495, 3),
rep(40561041, 3),
rep(28972798, 3),
rep(19351957, 3))
rate.collect<-NULL
rate.collect2<-NULL
lsq.collect<-NULL
lsq.collect2<-NULL
for (a in 1:length(tree13.vec)){
tree13.name<-tree13.vec[a]
tree14.name<-tree14.vec[a]
gs.in<-mean(gs13[a],gs14[a])
pedigree<-makeVCFpedigreeTEMPv2(genome.size=gs.in,
input.dir = input.data.dir,
tree13 = tree13.name,
tree14 = tree14.name)
pedigree<-pedigree[[1]]
tree13.basename <- basename(tree13.name)
tree14.basename <- basename(tree14.name)
ped_path <- file.path(pedigree_dir, paste0("pedigree_", tree13.basename, "_", tree14.basename, ".txt"))
if (!dir.exists(out.data.dir)) {
dir.create(out.data.dir, recursive = TRUE)
}
if (!dir.exists(pedigree_dir)) dir.create(pedigree_dir, recursive = TRUE)
write.table(pedigree,file = ped_path, sep = "\t", row.names = FALSE, col.names = TRUE,quote = FALSE)
out_name <- paste("EST", tree13.basename, tree14.basename, sep="_")
out<-mutSoma(pedigree_path = ped_path,
base_probs = c(probBASE[1], probBASE[2], probBASE[3], probBASE[4]),
prop_het = 0.1,
num_starts = 20,
out_dir = out.data.dir,
out_name = out_name)
#
#             rate.collect[a]<-out$estimates[1,1]
#             lsq.collect[a]<-out$estimates[1,3]
#             rate.collect2[a]<-out$estimates.flagged[1,1]
#             lsq.collect2[a]<-out$estimates.flagged[1,3]
}
# Load ggplot2
library(ggplot2)
# Step 1: Prepare raw top-10 values
gamma_py <- c(3.0408862224842674e-11, 3.0102823562062e-11, 3.018758480939331e-11, 3.019086209594077e-11, 3.0529176166783405e-11, 2.949382610286285e-11, 2.993648134306151e-11, 2.963879328612711e-11, 2.9705196602183194e-11, 3.0624694752775886e-11)
intercept_py <- c(2.2571850301495136e-07, 2.2578096118107038e-07, 2.2573366603955324e-07, 2.2602203035217172e-07, 2.2577049887143866e-07, 2.2634194331504714e-07, 2.262128987685139e-07, 2.260262851416104e-07, 2.263238332705777e-07, 2.2569465239849186e-07)
lse_py <- c(8.206607727571482e-14, 8.206621093087509e-14, 8.20662677291077e-14, 8.206630291011045e-14, 8.206656017786827e-14, 8.206657440491385e-14, 8.206670159121133e-14, 8.206674921746604e-14, 8.206676754417108e-14, 8.206677344757371e-14)
gamma_r <- c(4.17093702201317e-11, 3.90978717723363e-11, 3.87801287708837e-11, 4.11925363102995e-11, 4.09015131184511e-11, 4.45986343285523e-11, 3.92244773880917e-11, 3.91599522099344e-11, 4.54088390619236e-11, 3.44382703505235e-11)
intercept_r <- c(2.25442515730803e-07, 2.25764763222824e-07, 2.27207878203821e-07, 2.26413239663574e-07, 2.24677653417325e-07, 2.24644277536157e-07, 2.27620405201709e-07, 2.2768361241041e-07, 2.23046135556268e-07, 2.28862581329294e-07)
lse_r <- c(8.20695169157664e-14, 8.20802331982562e-14, 8.2080271642494e-14, 8.20877112383427e-14, 8.20944521821897e-14, 8.2103998143664e-14, 8.2110007657794e-14, 8.21127546256961e-14, 8.21241951839175e-14, 8.21250694210633e-14)
# Step 2: Combine into one data frame
make_df <- function(values, method, param) {
data.frame(Method = method, Value = values, Parameter = param)
}
df <- rbind(
make_df(gamma_py, "Python", "Gamma"),
make_df(intercept_py, "Python", "Intercept"),
make_df(lse_py, "Python", "LSE"),
make_df(gamma_r, "R", "Gamma"),
make_df(intercept_r, "R", "Intercept"),
make_df(lse_r, "R", "LSE")
)
library(dplyr)
summary_df <- df %>%
group_by(Method, Parameter) %>%
summarise(Mean = mean(Value), SD = sd(Value), .groups = "drop")
# Step 4: Plot
ggplot(summary_df, aes(x = Method, y = Mean, fill = Method)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0.2, position = position_dodge(0.6)) +
facet_wrap(~Parameter, scales = "free_y") +
labs(title = "Mean Estimates for Top 10 Gamma, Intercept, and LSE Values",
y = "Estimate Values",
x = "Methods") +
theme_minimal() +
theme(legend.position = "none")
# Load ggplot2
library(ggplot2)
# Step 1: Prepare raw top-10 values
gamma_py <- c(3.0408862224842674e-11, 3.0102823562062e-11, 3.018758480939331e-11, 3.019086209594077e-11, 3.0529176166783405e-11, 2.949382610286285e-11, 2.993648134306151e-11, 2.963879328612711e-11, 2.9705196602183194e-11, 3.0624694752775886e-11)
intercept_py <- c(2.2571850301495136e-07, 2.2578096118107038e-07, 2.2573366603955324e-07, 2.2602203035217172e-07, 2.2577049887143866e-07, 2.2634194331504714e-07, 2.262128987685139e-07, 2.260262851416104e-07, 2.263238332705777e-07, 2.2569465239849186e-07)
lse_py <- c(8.206607727571482e-14, 8.206621093087509e-14, 8.20662677291077e-14, 8.206630291011045e-14, 8.206656017786827e-14, 8.206657440491385e-14, 8.206670159121133e-14, 8.206674921746604e-14, 8.206676754417108e-14, 8.206677344757371e-14)
gamma_r <- c(4.17093702201317e-11, 3.90978717723363e-11, 3.87801287708837e-11, 4.11925363102995e-11, 4.09015131184511e-11, 4.45986343285523e-11, 3.92244773880917e-11, 3.91599522099344e-11, 4.54088390619236e-11, 3.44382703505235e-11)
intercept_r <- c(2.25442515730803e-07, 2.25764763222824e-07, 2.27207878203821e-07, 2.26413239663574e-07, 2.24677653417325e-07, 2.24644277536157e-07, 2.27620405201709e-07, 2.2768361241041e-07, 2.23046135556268e-07, 2.28862581329294e-07)
lse_r <- c(8.20695169157664e-14, 8.20802331982562e-14, 8.2080271642494e-14, 8.20877112383427e-14, 8.20944521821897e-14, 8.2103998143664e-14, 8.2110007657794e-14, 8.21127546256961e-14, 8.21241951839175e-14, 8.21250694210633e-14)
# Step 2: Combine into one data frame
make_df <- function(values, method, param) {
data.frame(Method = method, Value = values, Parameter = param)
}
df <- rbind(
make_df(gamma_py, "Python", "Gamma"),
make_df(intercept_py, "Python", "Intercept"),
make_df(lse_py, "Python", "LSE"),
make_df(gamma_r, "R", "Gamma"),
make_df(intercept_r, "R", "Intercept"),
make_df(lse_r, "R", "LSE")
)
library(dplyr)
summary_df <- df %>%
group_by(Method, Parameter) %>%
summarise(Mean = mean(Value), SD = sd(Value), .groups = "drop")
# Step 4: Plot
ggplot(summary_df, aes(x = Method, y = Mean, fill = Method)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0.2, position = position_dodge(0.6)) +
facet_wrap(~Parameter, scales = "free_y") +
labs(title = "Mean Estimates for Top 10 Gamma, Intercept, and LSE Values",
y = "Estimate Values",
x = "Methods") +
theme_minimal() +
theme(legend.position = "none")
file_path <- "/Users/adaakinci/Desktop/mutsoma_estimates_comparison.png"
# Save the plot
ggsave(filename = file_path, plot = my_plot,
width = 10, height = 5, dpi = 300)
# Load ggplot2
library(ggplot2)
# Step 1: Prepare raw top-10 values
gamma_py <- c(3.0408862224842674e-11, 3.0102823562062e-11, 3.018758480939331e-11, 3.019086209594077e-11, 3.0529176166783405e-11, 2.949382610286285e-11, 2.993648134306151e-11, 2.963879328612711e-11, 2.9705196602183194e-11, 3.0624694752775886e-11)
intercept_py <- c(2.2571850301495136e-07, 2.2578096118107038e-07, 2.2573366603955324e-07, 2.2602203035217172e-07, 2.2577049887143866e-07, 2.2634194331504714e-07, 2.262128987685139e-07, 2.260262851416104e-07, 2.263238332705777e-07, 2.2569465239849186e-07)
lse_py <- c(8.206607727571482e-14, 8.206621093087509e-14, 8.20662677291077e-14, 8.206630291011045e-14, 8.206656017786827e-14, 8.206657440491385e-14, 8.206670159121133e-14, 8.206674921746604e-14, 8.206676754417108e-14, 8.206677344757371e-14)
gamma_r <- c(4.17093702201317e-11, 3.90978717723363e-11, 3.87801287708837e-11, 4.11925363102995e-11, 4.09015131184511e-11, 4.45986343285523e-11, 3.92244773880917e-11, 3.91599522099344e-11, 4.54088390619236e-11, 3.44382703505235e-11)
intercept_r <- c(2.25442515730803e-07, 2.25764763222824e-07, 2.27207878203821e-07, 2.26413239663574e-07, 2.24677653417325e-07, 2.24644277536157e-07, 2.27620405201709e-07, 2.2768361241041e-07, 2.23046135556268e-07, 2.28862581329294e-07)
lse_r <- c(8.20695169157664e-14, 8.20802331982562e-14, 8.2080271642494e-14, 8.20877112383427e-14, 8.20944521821897e-14, 8.2103998143664e-14, 8.2110007657794e-14, 8.21127546256961e-14, 8.21241951839175e-14, 8.21250694210633e-14)
# Step 2: Combine into one data frame
make_df <- function(values, method, param) {
data.frame(Method = method, Value = values, Parameter = param)
}
df <- rbind(
make_df(gamma_py, "Python", "Gamma"),
make_df(intercept_py, "Python", "Intercept"),
make_df(lse_py, "Python", "LSE"),
make_df(gamma_r, "R", "Gamma"),
make_df(intercept_r, "R", "Intercept"),
make_df(lse_r, "R", "LSE")
)
library(dplyr)
summary_df <- df %>%
group_by(Method, Parameter) %>%
summarise(Mean = mean(Value), SD = sd(Value), .groups = "drop")
# Step 4: Plot
my_plot <-ggplot(summary_df, aes(x = Method, y = Mean, fill = Method)) +
geom_bar(stat = "identity", position = "dodge", width = 0.6) +
geom_errorbar(aes(ymin = Mean - SD, ymax = Mean + SD),
width = 0.2, position = position_dodge(0.6)) +
facet_wrap(~Parameter, scales = "free_y") +
labs(title = "Mean Estimates for Top 10 Gamma, Intercept, and LSE Values",
y = "Estimate Values",
x = "Methods") +
theme_minimal() +
theme(legend.position = "none")
file_path <- "/Users/adaakinci/Desktop/mutsoma_estimates_comparison.png"
# Save the plot
ggsave(filename = file_path, plot = my_plot,
width = 10, height = 5, dpi = 300)
